from __future__ import print_function
import sys
import os
import pathlib
import json
import pprint

# The common module provides setup functionality used by the samples,
# such as authentication and unique id generation.
from helpers import common

def lambda_handler(event, context):
  # Construct the service object to interact with the Content API.
  service, config, _ = common.init([''], __doc__)

  # Get the merchant ID from merchant-info.json.
  merchant_id = config['merchantId']

  # Get all items
  getRequest = service.products().list(merchantId=merchant_id)
  getResult = getRequest.execute()

  # contruct batches data
  batches_arr = []
  for i in range(len(getResult['resources'])):
    item  = getResult['resources'][i]
    new_batch = {
      "batchId": i,
      "merchantId": merchant_id,
      "method": "insert", # API Content does not provide batch update, we use insert instead to update
      "product": {
        'offerId': item['offerId'], # this field will be used as unique identifier to determine the operation (insert/update)
        'title': item['title'],
        'description': item['description'],
        'link': item['link'],
        'imageLink': item['imageLink'],
        'contentLanguage': 'en', # this field will be used as unique identifier to determine the operation (insert/update)
        'targetCountry': 'AU', # this field will be used as unique identifier to determine the operation (insert/update)
        'channel': item['channel'], # this field will be used as unique identifier to determine the operation (insert/update)
        'availability': item['availability'],
        'condition': item['condition'],
        'googleProductCategory': item['googleProductCategory'],
        'price': {
          'value': item['price']['value'],
          'currency': item['price']['currency']
        },
        'sellOnGoogleQuantity': '100', # hardcoded as 100, since we do not have packing supplies qty cap
      }
    }
    batches_arr.append(new_batch)
  
  # contruct payload
  payload = {
    'entries': batches_arr
  }

  # Create the request with the merchant ID and product object.
  insertRequest = service.products().custombatch(body=payload)
  # Execute the request and print the result.
  insertResult = insertRequest.execute()

  return {
    'statusCode': 200,
    'body': json.dumps('Operation completed!')
  }

# Allow the function to be called with arguments passed from the command line.
if __name__ == '__main__':
  lambda_handler({}, {})
